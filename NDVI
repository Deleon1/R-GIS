# NDVI

# Fonte dos dados: MiniCursoSPRING http://www.dpi.inpe.br/spring/portugues/manuais.html 
# Instala os pacotes necessários
install.packages("raster")
install.packages("sp")
install.packages("rgeos")

# Carrega os pacotes
library(raster)
library(sp)
library(rgeos)

# Seleciona a pasta que irá carregar e salvar os arquivos
setwd("/home/deleon/Documents/Github")

# Cria a função NDVI
NDVI = function(RED,NIR){
  (NIR-RED)/(NIR+RED)
}

# Carrega os arquivos raster no R
B3 = raster("LandSatTM3.tif")
B4 = raster("LandSatTM4.tif")
plot(B3)
plot(B4)
B3
B4

# Exibe a resolução dos objetos
res(B3)
res(B4)

B3_p1=B3
B4_p1=B4

# Sequência de etapas para padronizar a resolução dos objetos B3_p1 E B4_p1 em 1 x 1m
B3_p1=disaggregate(B3_p1,fact=c(res(B3_p1)[1],res(B3_p1)[2]))
B4_p1=disaggregate(B4_p1,fact=c(res(B4_p1)[1],res(B4_p1)[2]))

B3_p1
B4_p1

# Seleciona a área de sobreposição dos dois objetos
intersecao_B3_p1=intersect(B3_p1,B4_p1)
intersecao_B4_p1=intersect(B4_p1,B3_p1)
plot(intersecao_B3_p1)
plot(intersecao_B4_p1)
intersecao_B3_p1
intersecao_B4_p1

# Cria o raster com a função NDVI
NDVI_raster=NDVI(intersecao_B3_p1,intersecao_B4_p1)
plot(NDVI_raster)
NDVI_raster

# Salva o raster NDVI
writeRaster(NDVI_raster,"raster_NDVI.tif")


